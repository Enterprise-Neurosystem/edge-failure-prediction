// This script first creates listeners for the start and stop buttons.
// It also creates an EventSource that is linked to the url, '/generateData'. Once instantiated, the
// EventSource establishes a permanent socket that only allows server push communication.  In this
// application there are three event messages that are pushed to the browser: 'update', and
// 'jobfinished'.  There is also a listener for 'initialize', but it is not needed in this application.


const startPlotBtn = document.getElementById("startPredictBtn");
const stopPlotBtn = document.getElementById("stopPredictBtn");
const predictCSVNameObj = document.getElementById("predictCSV");
const dataSourceRadioObj = document.getElementsByName("dataSourceRadio");
const groupIdObj = document.getElementById("groupId");
const predMsgsObj = document.getElementById("predMsgs");


startPlotBtn.addEventListener('click', startPlotProcess);
stopPlotBtn.addEventListener('click', stopPlotProcess);

let eventSourceGraph;

function startPlotProcess(){
    console.log("startProcess()");
    let selectedRadio = Array.from(dataSourceRadioObj).find(radio => radio.checked);
    if(selectedRadio == null ){
        console.log("returning no radio selected")
        predMsgsObj.innerHTML = "No data source has been selected"
        return
    }

    console.log("selectedRadio: "+ selectedRadio.value);
    let groupId = null, predictCSVName = null;
    if(selectedRadio.value == 'kafka'){
        groupId = groupIdObj.value
        console.log("groupId: " + groupId);
        if(groupId == null){
            predMsgsObj.innerHTML = "Please enter your group id";
            return;
        }
    }else{
        if(selectedRadio.value == 'csv') {
            predictCSVName = predictCSVNameObj.options[predictCSVNameObj.selectedIndex].text;
            console.log("predictCSVName: " + predictCSVName);
            if(predictCSVName == "--Select File Name--"){
                predMsgsObj.innerHTML = "Please select a CSV data source";
                return;
            }
        }
    }



    const url = "/runPredict?" + "predictCSVFileName=" + predictCSVName + "&dataSource=" + selectedRadio.value +
                "&groupId=" + groupId;
    console.log("URL: " + url);
    initPlot();
    if(eventSourceGraph){
        eventSourceGraph.close();
    }
    // Create a JS EventSource object and give it the URL of a long running task.  The EventSource object
    // keeps the connection open to the given URL so that the process at the end point can send messages
    // back to the EventSource object.
    eventSourceGraph = new EventSource(url);

    // NOTE:  This event 'initialize' is currently not used
    eventSourceGraph.addEventListener("initialize", function(event){
        initPlot();
    }, false);

    // "update" Event gets current job progress (how many iterations have been completed")
    eventSourceGraph.addEventListener("update", function(event){
        updatePlot(event.data);

    }, false);

    // "jobfinished" Event gets back finished message generated by the server when job finishes normally
    eventSourceGraph.addEventListener("jobfinished", function(event){

        console.log("Job finished, closing EventSource")
        eventSourceGraph.close();
        startPlotBtn.disabled = false;
    }, false);


    startPlotBtn.disabled = true;  // Disable start btn after plot is started.
}
// Closes the EventSource object which closes the connection between browser and servlet.  This
// puts the PrintWriter in the servelt to be in an error state.  On the server the error state is checked,
// and if true, closes the PrintWriter safely.
function stopPlotProcess(){
    console.log("Stopping process");
    eventSourceGraph.close();
    startPlotBtn.disabled = false;  // Enable start btn after process is terminated.
    //progressTextObj.innerHTML = "User Terminated Process";
}